<template>
<div class="container">
	<div style="background: red">1</div>
	<div style="background: green">2</div>
	<div style="background: brown">3</div>
	<div style="background: blue">4</div>
	<div style="background: yellow">5</div>
	<div style="background: purple">6</div>
	<div style="background: orange">7</div>
	<div style="background: gray">8</div>
	<div style="background: black">9</div>
</div>
.container {
	display: grid;
	grid-template-columns: repeat(3, 100px);
	grid-template-rows: 100px 200px 300px;
	height: 600px;
}
.container div {
	color: white;
	font-size: 72px;
	text-align: center;
}
</template>

display: grid;inline-grid;
grid-template-rows: 100px 200px 300px; 分成3行每列宽度按顺序来
grid-template-columns 同上
repeat(num, list) list 为和上面一样的多个长度，num为重复多少次
num 为 auto-fill 时，则容器填满为止不断重复到最大数量
list中的数值用fr作单位的时候像flex一样进行平分可用区域

以下两个值为list中可取的特殊值
minmax(min, max),最小宽度和最大宽度，minmax(100px, 1fr)表示列宽不小于100px，不大于1fr，此时空间足够的情况使用1fr
auto 表示由浏览器自己决定长度

为网格线设置名字：
grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];
grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];
允许网格线有多个名字如：[fifth-line row-5]

设置行列间隙
row-gap:行的间隙
column-gap:列的间隙
gap:row-gap和column-gap两者合并简写

为单元格设置名字:
grid-template-areas: 'a b c'
					 'd e f'
					 'g h i';
为九个单元格设置a-i的名称，项目可指定grid-area单元格名称来决定单元格渲染位置
注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。
比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做header-start，终止位置的水平网格线和垂直网格线叫做header-end。
如果同时设置了两者，则同一条网格线存在两个名字，都可使用.

grid-auto-flow:网格默认将内部元素先行后列的顺序逐个排序，当该值为column时则以先列后行的顺序依次排列
还有第二个值dense,(grid-auto-flow: column dense;)没有第二个值时，如果指定了第一个项目在第二个块的位置，第一个块会空出来
指定了dense后则会用后面的大小合适的块来补充到第一个块中

justify-items: 所有项目在自己单元格内的水平对齐方式
align-items: 所有项目在自己单元格内的垂直对齐方式
place-items: 是justify-items和align-items的合并简写;例:place-items: <align-items> <justify-items>;
有值:start、end、center、stretch

justify-content: 整个内容区块在容器中的水平布局方式
align-content: 整个内容区块在容器中的垂直布局方式
place-content: justify-content和align-content两者的合并简写
已上三个属性所具有的属性有:
start、center、end、space-around、space-between、space-evenly、stretch,其表现和flex的相同
这个值如果设置成space-between会覆盖掉grid-gap的值

grid-auto-columns属性和grid-auto-rows属性用来设置，浏览器自动创建的多余网格的列宽和行高。
它们的写法与grid-template-columns和grid-template-rows完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。

grid-template属性是grid-template-columns、grid-template-rows和grid-template-areas这三个属性的合并简写形式。
grid属性是grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow这六个属性的合并简写形式。

项目属性:
定义自身的边所在的位置，以确定大小:
grid-column-start属性：左边框所在的垂直网格线
grid-column-end属性：右边框所在的垂直网格线
grid-row-start属性：上边框所在的水平网格线
grid-row-end属性：下边框所在的水平网格线
grid-column属性是grid-column-start和grid-column-end的合并简写形式，grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。
格式：
grid-column: 1 / 2;
grid-row: 1 / 3;
使用这些属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。

grid-area类似于grid-column和grid-row指定的位置的语法糖，根据两者css代码的先后顺序覆盖
有两种形式:1.根据父容器的grid-template-areas的区块名称来定
2.grid-area: <row-start> / <column-start> / <row-end> / <column-end>;

justify-self和align-self
有值：start、center、end、stretch(默认)。
start：对齐单元格的起始边缘。
end：对齐单元格的结束边缘。
center：单元格内部居中。
stretch：拉伸，占满单元格的整个宽度（默认值）。

place-self属性是align-self属性和justify-self属性的合并简写形式。
place-self: <align-self> <justify-self>;




